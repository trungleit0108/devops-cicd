version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # command: |
          #   # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
          #   # SUCCESS = 1
          #   export SUCCESS=$(curl --insecure  https://kvdb.io/8trtArSkXSX19ks6tFwjiD/migration_<< parameters.Workflow_ID >>)
          #   echo $SUCCESS
          #   if(( $SUCCESS==1 ));
          #   then
          #     cd ~/project/backend
          #     pwd
          #     ls -a
          #     npm run migrations:revert
          #   fi
          command: |
            cd ~/project/backend
            npm install
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["25:42:3e:26:7b:bf:c0:a3:34:bb:01:98:f6:b4:42:c1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible & dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add --update --no-cache python3 py3-pip
            /usr/local/bin/python -m pip install --upgrade pip
            ansible --version
            pip install awscli --upgrade
      - run:
          name: Configure server
          command: |
            export NODE_ENV=production
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            export TYPEORM_HOST=$TYPEORM_HOST
            export TYPEORM_PORT=$TYPEORM_PORT 
            export TYPEORM_USERNAME=$TYPEORM_USERNAME
            export TYPEORM_PASSWORD=$TYPEORM_PASSWORD 
            export TYPEORM_DATABASE=$TYPEORM_DATABASE

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 #todo
      # - image: circleci/node:14.18.1
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            echo 'Migration is running!! Nothing can be done'
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend
      - run:
          name: send migration status to kvdb.io
          command: |
            curl --insecure https://kvdb.io/8trtArSkXSX19ks6tFwjiD/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            npm audit fix --force --audit-level=critical
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # - destroy-environment:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - slack/notify:
      #     branch_pattern: .+
      #     event: fail
      #     channel: $SLACK_DEFAULT_CHANNEL
      #     template: basic_fail_1

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["25:42:3e:26:7b:bf:c0:a3:34:bb:01:98:f6:b4:42:c1"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip nodejs npm
            apk add --update ansible tar npm curl
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Create env file
          command: |
            cd backend
            touch .env
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            # Use these values for the local PG database from the Docker Compose file
            echo "TYPEORM_HOST=${TYPEORM_HOST}"  >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cat .env

      # - run:
      #     name: build zip file
      #     command: |
      #       cd /root/project/
      #       tar -zcvf api.tar.gz backend/
      #       mv api.tar.gz ~/project/.circleci/ansible/roles/deploy/files/

      - run:
          name: Deploy backend
          command: |
            ls -a ./backend
            cp -r ./backend .circleci/ansible/roles/deploy/files

            cd backend
            npm i
            npm run build
            cd ..
            pwd
            ls
            tar -C backend -czvf artifact.tar.gz .

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            apk add --update nodejs 
            apk add --update npm
            apk add --update ansible
            ansible --version
            apk add --update tar
            pip3 install awscli

            echo "STARTING Install dependencies"
            pwd
            ls -la
            echo "ENDING Install dependencies"
      - run:
          name: Create env file
          command: |
            cd backend
            touch .env
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            # Use these values for the local PG database from the Docker Compose file
            echo "TYPEORM_HOST=${TYPEORM_HOST}"  >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cat .env
            echo "STARTING Create env file"
            pwd
            ls -la
            echo "ENDING Create env file"
      - run:
          name: Backend smoke test.
          command: |
            echo "Backend smoke test."
            pwd
            ls -la

            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople

            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CURRENT_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    # resource_class: medium
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - test-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - deploy-infrastructure:
          context: slack-secrets
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: slack-secrets
          requires: [deploy-infrastructure]
      - run-migrations:
          context: slack-secrets
          requires: [configure-infrastructure]
      - deploy-frontend:
          context: slack-secrets
          requires: [run-migrations]
      - deploy-backend:
          context: slack-secrets
          requires: [run-migrations]
      - smoke-test:
          context: slack-secrets
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     context: slack-secrets
      #     requires: [smoke-test]
      # - cleanup:
      #     context: slack-secrets
      #     requires: [cloudfront-update]
